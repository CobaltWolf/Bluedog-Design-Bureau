// Contract for BDB Orbital Solar Observatory (OSO) satellites 
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_SolarStudy
    group = BluedogDB
    genericTitle = Perform a Kerbolar study
    genericDescription = Perform a Kerbolar study from orbit of a planet or moon.
	
	title = Perform a Kerbolar study from orbit of @targetBody.
	description = Kerbol has been a steady source of beautiful light and warmth for as long as Kerbalkind can remember. Our top scientists have however developed a sneaking suspicion that there's more to it. So we need someone to perform a further study of Kerbol from orbit of @targetBody. That someone is you.&br;&br;While we're pretty sure all this talk of solar radiation and other strange mumblings we overheard the eggheads saying are perfectly harmless, there's no need to expose Kerbals for these experiments. But we won't stop you if you want to do so anyway! Just sign this waiver first.
	
    synopsis = <color=yellow>Launch an OOS satellite into space around @targetBody and perform the requested experiments.</color>
	notes = In assembly, use the tag 'OSO' to find components fitting for this mission.
    completedMessage = The results you obtained were certainly informative. Go on, move along now, nothing to see here.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks025,@BluedogDB:Kerbucks05)
    rewardFunds = Random(@BluedogDB:Kerbucks075,@BluedogDB:Kerbucks1)
    rewardReputation = Random(2.0, 5.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies.Random()
    }
	
	// Any body that has been orbited can be targeted.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
        hidden = true

        validBodies = OrbitedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()))
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_oso , bd_solarWind , bd_photometer]
    }
	
	// Mission activates only for science that has not yet been done and triggers only when at least 2 and up to 4 different experiment/location combinations are available.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() == 0.0)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
        scienceSubjects = @scienceSubjectsTemp4.Random(2,4)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
    {
        name = OOS satellite
        type = VesselParameterGroup
        title = Launch a new OOS science satellite
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The satellite must be a new vessel
		}
		
		//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
		PARAMETER
		{
			name = Orbit
			type = Orbit
			title = Achieve the specified orbit and hold for 1 day to gather data
				
			minApA = Random(0.5,1.5) * @targetBody.Radius()
			maxApA = Random(1.5,2) * @targetBody.Radius()
			maxPeA = @targetBody.SpaceAltitudeThreshold()
			minEccentricity = Random(0.05,0.2)
			minInclination = Random(25,95)
			disableOnStateChange = true
		}
    }
	
	PARAMETER
	{
		name = Duration
		type = Duration
		duration = 1d

		preWaitText = Holding to gather data
		waitingText = Holding to gather data
		completionText = Data complete
		startCriteria = PARAMETER_COMPLETION
		parameter = Orbit
	}

	PARAMETER
	{
		type = CollectScience

		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(3000.0, 5000.0)
		disableOnStateChange = true

		ITERATOR
		{
			type = ScienceSubject
			scienceSubject = @/scienceSubjects
		}
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.
	REQUIREMENT
    {
        name = Any
		type = Any

        REQUIREMENT
        {
            name = TechResearchedA
			type = TechResearched

            tech = survivability
        }

        REQUIREMENT
        {
            name = TechResearchedB
			type = TechResearched

            tech = stability
        }
    }
}
