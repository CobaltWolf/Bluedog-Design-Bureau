// Contract for BDB KH-1 Corona satellites 
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_Corona_KH1
    group = BluedogDB
    genericTitle = Perform photo reconnaissance.
    genericDescription = Perform photo reconnaissance of the specified areas.
	
	title = Perform photo reconnaissance from a polar orbit of @targetBody.
	description = Welcome back, Kommander. We have just intercepted an encrypted transmission suggesting that our rivals, those Kommy Krussians, may have set up suspicious new activities in several areas on @targetBody. Our Kovert Ops units are out of reach, so we want you to get up there and take pictures of the suspected areas. If there's any Krussian activity there, we will know. Oh and you will have to return the film canister back to base, we haven't figured out how to turn black and white into 1's and 0's yet.
	
    synopsis = <color=yellow>Launch a Bloodhound KH-1 recon satellite into space around @targetBody and perform photo recon of the specified areas.</color>
	notes = In assembly, use the tag 'KH1' to find components fitting for this mission.
    completedMessage = Either those Krussians have developed excellent camouflage, or we really are just looking at a Kerbal-shaped rock formation. We'll get them next time!

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks05,@BluedogDB:Kerbucks075)
    rewardFunds = Random(@BluedogDB:Kerbucks1,@BluedogDB:Kerbucks105)
    rewardReputation = Random(4.0, 8.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies.Random()
    }
	
	// Any body that has been reached can be targeted.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
        hidden = true

        validBodies = ReachedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()))
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_mapping]
    }
	
	// Randomly select 1 valid biome to study from low space.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow)
        scienceSubjects = @scienceSubjectsTemp3.Random(1)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Recover
    }
	
	PARAMETER
    {
        name = Bloodhound KH-1 Recon Satellite
        type = VesselParameterGroup
        title = Launch a new Bloodhound recon satellite
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The satellite must be a new vessel
		}
		
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}
		
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			part = bluedog_Keyhole_Camera_KH1
			
			title = You should take a proper camera with you
		}
		
		//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
		PARAMETER
		{
			name = Orbit
			type = Orbit
			title = Achieve the specified polar low space orbit
			
			maxApA = Random(0.4,0.5) * @targetBody.SpaceAltitudeThreshold()
			maxPeA = (Random(0.3,0.4) * @targetBody.SpaceAltitudeThreshold()) < @targetBody.AtmosphereAltitude() ? @targetBody.AtmosphereAltitude() :  (Random(0.3,0.4) * @targetBody.SpaceAltitudeThreshold())
			maxEccentricity = 0.1
			minInclination = Random(70,85)
			maxInclination = Random(90,105)
			disableOnStateChange = true
		}
    }

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		title = Take a photo of the specified area
		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		ITERATOR
		{
			type = ScienceSubject
			scienceSubject = @/scienceSubjects
		}
	}
	
	PARAMETER
	{
		name = ReturnHome
		type = ReturnHome
		title = Recover the film canister
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.
	REQUIREMENT
    {
        name = TechResearched
		type = TechResearched
		tech = engineering101
    }
	
	// This contract will no longer be available after any of these techs has been researched. KH-4 will then trigger instead of KH-1.
	REQUIREMENT
    {
        name = Any
		type = Any
		invertRequirement = true
		
		REQUIREMENT
		{
			name = TechResearchedB
			type = TechResearched
			tech = stability
		}
		
		REQUIREMENT
		{
			name = TechResearchedC
			type = TechResearched
			tech = basicScience
		}
    }
}
