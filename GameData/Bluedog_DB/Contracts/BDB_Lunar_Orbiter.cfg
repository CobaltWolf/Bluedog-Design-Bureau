// Contract for BDB Lunar Orbiter satellites 
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_Lunar_Orbiter
    group = BluedogDB
    genericTitle = Perform a photographic study.
    genericDescription = Perform a photographic study from varying orbits.
	
	title = Perform a photographic study of @targetBody.
	description = Our space program is going well, we even dare say it's doing better than ever - don't let the insurance company tell you otherwise. We have even been quite succesful in our studies of @targetBody. However, somehow those nefarious Krussians have been one step ahead of us the whole time. The top brass has decided this cannot be allowed to continue and have told us we should start making plans for a manned landing of @targetBody. They also told us that whoever goes there, should return back home as well - for some reason they seem to think there's such a thing as a reputation to uphold.&br;&br;Anyhow, what this means is we will first need to scout @targetBody and find several places suitable for a safe landing. We've decided the best way to do this is to simply send a probe with a throwaway Kolaroid cam to convince the brass that there's plenty of flat space to land on.
	
    synopsis = <color=yellow>Launch a Kreuznach probe into the specified orbits around @targetBody and perform the requested experiments.</color>
	notes = In assembly, use the tag 'Lunar Orbiter' to find components fitting for this mission.
    completedMessage = Good job! All those blurry monochrome images will surely make it look sufficiently flat to be convincing.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks05,@BluedogDB:Kerbucks075)
    rewardFunds = Random(@BluedogDB:Kerbucks1,@BluedogDB:Kerbucks105)
    rewardReputation = Random(4.0, 6.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies.Random()
    }
	
	// Target any body that has been orbited, except homeworld.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
        hidden = true

        validBodies = OrbitedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()) && cb != HomeWorld())
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_camera, bd_GeigerCounter]
    }
	
	// Select situations in both HighSpace and LowSpace to do science from. Separated to allow for sequential mission.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow)
        scienceSubjects = @scienceSubjectsTemp3.Random(5)
		scienceSubjectsTemp4 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceHigh)
		scienceSubjects2 = @scienceSubjectsTemp4
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
    {
        name = Kreuznach
        type = VesselParameterGroup
        title = Launch a new Kreuznach probe
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The probe must be a new vessel
		}
		
		PARAMETER
		{
			name = Sequence
			type = Sequence
			
			//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Put Kreuznach into a high altitude, elliptical, equatorial orbit
			
				minApA = (Random(5,6) * @targetBody.SpaceAltitudeThreshold()) > (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ? (Random(0.85,0.9) * (@targetBody.SphereOfInfluence() - @targetBody.Radius())) : (Random(5,6) * @targetBody.SpaceAltitudeThreshold())
				maxApA = (Random(6.5,7.5) * @targetBody.SpaceAltitudeThreshold()) > (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ? (Random(0.92,0.95) * (@targetBody.SphereOfInfluence() - @targetBody.Radius())) : (Random(6.5,7.5) * @targetBody.SpaceAltitudeThreshold())
				maxPeA = (Random(0.5,0.75) * @targetBody.SpaceAltitudeThreshold()) < @targetBody.AtmosphereAltitude() ? (1.5 * @targetBody.AtmosphereAltitude()) :  (Random(0.5,0.75) * @targetBody.SpaceAltitudeThreshold())
				maxInclination = Random(8,15)
				disableOnStateChange = true
			}
			
			//Cannot use biome specific science collection due to equatorial orbit - many non-equatorial biomes could otherwise be selected for targeting
			PARAMETER
			{
				name = CollectScienceA
				type = CollectScience
				title = Take pictures and measure radiation from high space within this orbit

				situation = InSpaceHigh
				experiment = [bd_camera, bd_GeigerCounter]
				recoveryMethod = @/recoveryMethod

				rewardFunds = Random(1000.0, 2000.0)
				disableOnStateChange = true
			}
			
			//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
			PARAMETER
			{
				name = Orbit
				type = Orbit
				title = Now lower the orbit Periapsis and prepare to take low altitude photos
			
				maxPeA = (Random(0.2,0.3) * @targetBody.SpaceAltitudeThreshold()) < @targetBody.AtmosphereAltitude() ? (1.05 * @targetBody.AtmosphereAltitude()) :  (Random(0.2,0.3) * @targetBody.SpaceAltitudeThreshold())
				disableOnStateChange = true
			}
			
			//Cannot use biome specific science collection due to equatorial orbit - many non-equatorial biomes could otherwise be selected for targeting
			PARAMETER
			{
				name = CollectScienceB
				type = CollectScience
				title = Take low altitude photographs and another radiation measurement

				situation = InSpaceLow
				experiment = [bd_camera, bd_GeigerCounter]
				recoveryMethod = @/recoveryMethod

				rewardFunds = Random(1000.0, 2000.0)
				disableOnStateChange = true
			}
			
		}
    }

	// Mission is no longer offered for bodies that have been landed on and returned from. This is to stop endless repetitions offered for bodies that have been largely explored already.
	REQUIREMENT
	{
    name = ReturnFromSurface
    type = ReturnFromSurface
	invertRequirement = true
	
    targetBody = @/targetBody
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit 
        targetBody = HomeWorld()
    }
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.

    REQUIREMENT
    {
        name = TechResearched
		type = TechResearched

        tech = basicScience
    }
}