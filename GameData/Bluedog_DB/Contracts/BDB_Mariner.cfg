// Contract for BDB Mariner probes
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_Mariner
    group = BluedogDB
    genericTitle = Aim at another planet and miss.
    genericDescription = Aim at another planet and miss.
	
	title = Aim at @targetBody and miss.
	description = We are pretty sure that there's more planets out there than what we've encountered so far. At least, Wernher swears he's seen a bright, colored speck in the sky that should be a nearby planet. He's even gone and gave it a name already, @targetBody. We at mission control figure, if it's out there, we gotta go there. You never know, there may be cookies we haven't tasted yet and what kind of Kerbals would we be if we didn't want to find out? It should be obvious to you by now, but we're telling you to go take a look. Fly to @targetBody and get close enough to see if it's tasty. Oh and do some science while you're there, may as well pretend we're doing this for the good of Kerbalkind and all that.
	
    synopsis = <color=yellow>Launch a Wayfarer probe on an interplanetary trajectory towards @targetBody and miss.</color>
	notes = In assembly, use the tag 'Mariner' to find components fitting for this mission.
    completedMessage = That's it, all science was returned in good order. Sadly, we're still in the dark about the edibility of @targetBody.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetbody3.Random()

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks1,@BluedogDB:Kerbucks105)
    rewardFunds = Random(@BluedogDB:Kerbucks105,@BluedogDB:Kerbucks2)
    rewardReputation = Random(6.0, 10.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies.Random()
		targetBody2 = @validBodies2.Random()
    }		
	
	// Target the next unreached body in logical progression.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = ReachedBodies().Where(cb => !cb.IsHomeWorld() && !cb.IsSun())
		validBodies1 = NextUnreachedBodies(1)
		validBodies2 = @validBodies1.Where(cb => !cb.IsSun())
		
		targetbody3 = [ @targetBody1, @targetBody2 ]
    }
	
    //Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true
	
        experiments = [logmmImpacts , logIonTrap, bd_microwaveSpec, bd_IRradiometer, bd_magScan]
		experimentselect = @experiments.Random(3)
    }
	
	// Any space science around the target that has not yet been done. Select 5 experiments.
    //DATA
    //{
	//	type = List<ScienceSubject>
    //    hidden = true
	//
    //    scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
	//	scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() == 0.0)
	//	scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Biome().IsKSC())
	//	scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
    //    scienceSubjects = @scienceSubjectsTemp4.Random(5)
    //}
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
    {
        name = Wayfarer
        type = VesselParameterGroup
        title = Launch a new Wayfarer probe
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The probe must be a new vessel
		}
		
		//Flyby within LowSpace range.
		PARAMETER
		{
			name = Orbit
			type = Orbit
			situation = ESCAPING
			title = Aim Wayfarer at @targetBody and fly past it like a tourist - watch your Periapsis!
		
			maxPeA = @targetBody.SpaceAltitudeThreshold()
			disableOnStateChange = true
		}
	}	
	
	PARAMETER
	{
		name = CollectScience
		type = CollectScience
		title = Perform the requested experiments

		location = Space
		experiment = @/experimentselect
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(6000.0, 10000.0)
		disableOnStateChange = true
	}

	// Mission is no longer offered for bodies that have been landed on.
	REQUIREMENT
	{
		name = Landing
		type = Landing
		invertRequirement = true
	
		targetBody = @/targetBody
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
		name = OrbitReq
		type = Orbit 
        targetBody = HomeWorld()
    }
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.

    REQUIREMENT
    {
        name = TechResearched
		type = TechResearched

        tech = survivability
    }
}