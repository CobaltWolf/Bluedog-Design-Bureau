// Contract for BDB Orbiting Geophysical Observatory (OGO) satellites 
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_GeoStudy
    group = BluedogDB
    genericTitle = Perform a Geophysical study
    genericDescription = Perform a Geophysical study from orbit of a planet or moon.
	
	title = Perform a Geophysical study from orbit of @targetBody.
	description = Previous studies of @targetBody have shown all kinds of strange things happening on and above the surface. Being an enterprising space program, naturally we proposed to send over one of our test dum...ahem pilots right away. Sadly the board declined our proposal, on the grounds that it's unethical to land Kerbals without a return plan. Bah, bureaucrats. Instead, you are hereby tasked with sending an unmanned probe into an elliptic orbit of @targetBody to conduct a set of experiments and transmit their results back to us. If we can make up the results with just the right phrasing, we just might get to do a manned mission after all - you ARE with us on this, right?
	
    synopsis = <color=yellow>Launch an OOG satellite into space around @targetBody and perform the requested experiments.</color>
	notes = In assembly, use the tag 'OGO' to find components fitting for this mission.
    completedMessage = Excellent! All these results show nothing anomalous, or even anything we didn't yet know at all! Start prepping those interns, we got flights to plan.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks025,@BluedogDB:Kerbucks05)
    rewardFunds = Random(@BluedogDB:Kerbucks075,@BluedogDB:Kerbucks1)
    rewardReputation = Random(2.0, 5.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies.Random()
    }
	
	// Any body that has been reached can be targeted.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
        hidden = true

        validBodies = ReachedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()))
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_cosmicRay , gravityScan , logIonTrap , bd_gammaRay, bd_magScan , bd_massSpec]
		experimentslow = @experiments.Random(2)
    }
	
	// Mission activates only for science that has not yet been done and triggers only when at least 4 and up to 6 different experiment/location combinations are available.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() == 0.0)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.Situation() == InSpaceHigh)
        scienceSubjects = @scienceSubjectsTemp4.Random(2,4)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
    {
        name = OOG Satellite
        type = VesselParameterGroup
        title = Launch a new OOG geophysical satellite
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The satellite must be a new vessel
		}
		
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}
		
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleDeployableSolarPanel
			title = Have at least 1 solar panel on this spacecraft
		}
		
		//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
		PARAMETER
		{
			name = Orbit
			type = Orbit
			title = Achieve the specified orbit and hold for 1 day to gather data
				
			minApA = (Random(10,11.45) * @targetBody.Radius()) > (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ? (Random(0.85,0.9) * (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ) : (Random(10,11.45) * @targetBody.Radius())
			maxApA = (Random(11.5,12) * @targetBody.Radius()) > (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ? (Random(0.92,0.95) * (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ) : (Random(11.5,12) * @targetBody.Radius())
			maxPeA = @targetBody.SpaceAltitudeThreshold()
			minInclination = Random(25,35)
			maxInclination = Random(75,95)
			disableOnStateChange = true
		}
    }
	
	PARAMETER
	{
		name = Duration
		type = Duration
		duration = 1d

		preWaitText = Holding to gather data
		waitingText = Holding to gather data
		completionText = Data complete
		startCriteria = PARAMETER_COMPLETION
		parameter = Orbit
	}

	PARAMETER
	{
		name = CollectScienceA
		type = CollectScience

		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(3000.0, 5000.0)
		disableOnStateChange = true

		ITERATOR
		{
			type = ScienceSubject
			scienceSubject = @/scienceSubjects
		}
	}
	
	PARAMETER
	{
		name = CollectScienceB
		type = CollectScience
		
		situation = InSpaceLow
		recoveryMethod = Transmit
		experiment = @/experimentslow

		rewardFunds = Random(6000.0, 10000.0)
		disableOnStateChange = true
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.
	REQUIREMENT
    {
        name = TechResearched
		type = TechResearched
		tech = basicScience
    }
}
