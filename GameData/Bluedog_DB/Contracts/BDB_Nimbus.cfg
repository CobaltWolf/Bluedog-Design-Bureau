// Contract for BDB Nimbus satellites 
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_Nimbus
    group = BluedogDB
    genericTitle = Perform a weather study.
    genericDescription = Perform a weather study from orbit of a planet.
	
	title = Perform a weather study from orbit of @targetBody.
	description = You've heard of weather, right? It's that stuff that makes moisture appear out of thin air. Now, one of our slightly more eccentric colleagues was looking up at the sky recently and he's saying there some bad weather about that may interfere with our plans. So, we decided that you should do what we do best: launch a rocket up and around to go check it out. Your mission is to determine the weather out at the indicated areas and whether or not we can weather it.
	
    synopsis = <color=yellow>Launch a Aeolus weather satellite into space around @targetBody and perform the requested experiments.</color>
	notes = In assembly, use the tag 'Nimbus' to find components fitting for this mission.
    completedMessage = Thanks to the extensive weather data you gathered, we can now predict with absolute certainty that the weather is going to be completely unpredictable.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks025,@BluedogDB:Kerbucks05)
    rewardFunds = Random(@BluedogDB:Kerbucks1,@BluedogDB:Kerbucks105)
    rewardReputation = Random(2.0, 5.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies.Random()
    }
	
	// Only bodies with Atmosphere can be targeted.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
        hidden = true

        validBodies = ReachedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()) && cb.HasAtmosphere())
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_weather , bd_microwaveSpec , bd_IRspec , bd_IRradiometer]
    }
	
	// Mission activates only for science that has not yet been done and triggers only when at least 3 and up to 6 different experiment/location combinations are available.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() == 0.0)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
        scienceSubjects = @scienceSubjectsTemp4.Random(3,6)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
    {
        name = Aeolus Satellite
        type = VesselParameterGroup
        title = Launch a new Aeolus weather satellite
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The satellite must be a new vessel
		}
		
		//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
		PARAMETER
		{
			name = Orbit
			type = Orbit
			title = Achieve a near-circular, polar orbit
				
			minApA = Random(1,1.1) * @targetBody.SpaceAltitudeThreshold()
			maxApA = Random(1.1,1.2) * @targetBody.SpaceAltitudeThreshold()
			maxPeA = @targetBody.SpaceAltitudeThreshold()
			maxEccentricity = 0.1
			minInclination = Random(75,85)
			maxInclination = Random(95,105)
			disableOnStateChange = true
				
			PARAMETER
			{
				name = Duration
				type = Duration
				duration = 45s

				preWaitText = Confirming orbit
				waitingText = Confirming orbit
				completionText = Orbit confirmed
			}
		}
    }

	PARAMETER
	{
		type = CollectScience

		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(3000.0, 5000.0)
		disableOnStateChange = true

		ITERATOR
		{
			type = ScienceSubject
			scienceSubject = @/scienceSubjects
		}
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit 
        targetBody = HomeWorld()
    }
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.
	REQUIREMENT
    {
        name = Any
		type = Any

        REQUIREMENT
        {
            name = TechResearchedA
			type = TechResearched

            tech = basicScience
        }

        REQUIREMENT
        {
            name = TechResearchedB
			type = TechResearched

            tech = miniaturization
        }
    }
}