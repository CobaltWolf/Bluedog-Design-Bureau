// Contract for BDB Ranger Block 2 landing probes
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_Ranger_Block2
    group = BluedogDB
    genericTitle = Achieve a rough landing.
    genericDescription = Achieve and survive a rough landing with a probe.
	
	title = Achieve a rough landing on @targetBody.
	description = You'll be glad to know that, after our recent 'lithobraking' debacle, Bob has been reassigned to very important duties at the pinnacle of our space program, as a strictly voluntary development test du.. pilot. We can all agree that the attempt was very spectacular - we even saved the tapes for our annual KSC blooper reel! However, it wasn't quite what we had envisioned. Basically, we want you to try again, except try a little harder this time. Or less hard, depending on your perspective...&br;&br;We think we may have just the thing to help you actually succeed, too: it's called a 'rough lander probe'. Don't tell anyone, but it's really just a painted-over tennis ball with a micro transmitter put inside. The idea is simple, really: since we expect it to be too hard for you to land the whole probe softly, you can just drop the rough lander probe to the surface once you're near. But you're still going to have to do some extra braking beforehand, it's still got to slow down quite a bit. Once on the surface, be sure to send back data from the impact. And we still want you to gather science on the way there too, this ain't a charity.
	
    synopsis = <color=yellow>Launch a Burke Block 2 probe to @targetBody and perform experiments in low space, before dropping the rough lander to a survivable impact and seismic science transmission.</color>
	notes = In assembly, use the tag 'Ranger' to find components fitting for this mission.
    completedMessage = You actually did it! Personally, I had money riding on @targetBody eating that probe for breakfast. Or whatever meal's the fashion out there these days.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks075,@BluedogDB:Kerbucks1)
    rewardFunds = Random(@BluedogDB:Kerbucks2,@BluedogDB:Kerbucks3)
    rewardReputation = Random(6.0, 8.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies1.Random()
    }
	
	// Target any body without atmosphere that has been reached.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
        hidden = true

        validBodies = ReachedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()) && cb != HomeWorld())
		validBodies1 = @validBodies.Where(cb => !cb.HasAtmosphere())
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_camera, bd_gammaRay, bd_radarAltimeter]
    }
	
	// Select 4 situations in LowSpace to do science.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow)
        scienceSubjects = @scienceSubjectsTemp3.Random(4)
    }
	
	//The possible biomes for the target body.
    DATA
    {
		title = biomelist
		type = List<Biome>
        biomes = @targetBody.Biomes()
        hidden = true
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
	{
		name = Burke-2
		type = VesselParameterGroup
		title = Launch a new Burke-2 probe
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The probe must be a new vessel
		}
		
		//First reach the target SOI with Burke-2 before the rest of the parameters can be triggered.
		PARAMETER
		{
			name = ReachState
			type = ReachState
			title = Reach @/targetBody SOI with the Burke probe
		
			situation = ORBITING
			situation = ESCAPING
			situation = SUB_ORBITAL
			
			disableOnStateChange = true
		}
    }
	
	// All experiments from list must be performed in low space around target
	PARAMETER
	{
		name = CollectScienceA
		type = CollectScience

		situation = InSpaceLow
		experiment = @/experiments
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(2000.0, 3000.0)
		disableOnStateChange = true
	}

	//Do a soft landing at the target.
	PARAMETER
	{
		name = ReachState
		type = ReachState
		situation = LANDED
		disableOnStateChange = true
	}
	
	//And transmit seismic science from the surface. Mission complete!
	PARAMETER
	{
		name = CollectScienceB
		type = CollectScience
		situation = SrfLanded
		recoveryMethod = Transmit
		experiment = seismicScan
		title = Transmit seismic data from the surface of @targetBody after successful landing
		hideChildren = true
		disableOnStateChange = true
	}
	
	// Mission is no longer offered for bodies that have been landed on and returned from. This is to stop endless repetitions offered for bodies that have been largely explored already.
	REQUIREMENT
	{
    name = ReturnFromSurface
    type = ReturnFromSurface
	invertRequirement = true
	
    targetBody = @/targetBody
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit 
        targetBody = HomeWorld()
    }
	
	//First Ranger mission must have been completed before and target body must have been flown by before.
	REQUIREMENT
	{
		name = All
		type = All
		
		REQUIREMENT
		{
			name = FlyBy
			type = FlyBy
			targetBody = @/targetBody
		}
		
		REQUIREMENT
		{
			name = CompleteContract
			type = CompleteContract
			contractType = BDB_Ranger
			targetBody = @/targetBody
			minCount = 1
			cooldownDuration = 0d
		}
	}
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.
    REQUIREMENT
    {
        name = TechResearched
		type = TechResearched

        tech = basicScience
    }
}