// Contract for BDB AIMP satellites 
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_AIMP
    group = BluedogDB
    genericTitle = Perform a magnetic field study.
    genericDescription = Perform a magnetic field study from varying orbits.
	
	title = Perform a magnetic field study of @targetBody.
	description = Our previous studies into the geophysical properties of @targetBody have shown us the presence of an ominously named phenomenon called the magnetosphere. Wernher initially jumped around the lab with joy, screaming that he'd been right all along and there really is a Dyson sphere after all. He quickly became disappointed however, when we told him it was just a giant magnetic field.&br;&br; After overcoming his disappointment and having stuffed himself with comfort food (we hear his favorite is peanut-butter-jelly donuts with a guacamole side), Wernher concluded the magnetosphere is still very much worth studying. He came up with the following mission to maximize our understanding of this magnet stuff. Go do science!
	
    synopsis = <color=yellow>Launch a MIP research satellite into the specified orbits around @targetBody and perform the requested experiments.</color>
	notes = In assembly, use the tag 'MIP' to find components fitting for this mission.
    completedMessage = Wernher is still disappointed, but at least we are now sure that @targetBody is a giant magnet that may or may not be edible.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks05,@BluedogDB:Kerbucks075)
    rewardFunds = Random(@BluedogDB:Kerbucks1,@BluedogDB:Kerbucks105)
    rewardReputation = Random(4.0, 6.0)

	// Randomly select a possible target body.
    DATA
    {
        name = target
		title = target
		type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies.Random()
    }
	
	// Target any body that has been reached, except homeworld.
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
        hidden = true

        validBodies = ReachedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()) && cb != HomeWorld())
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_magScan]
    }
	
	// Mission to do magScans for both SpaceLow and SpaceHigh. 
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
        scienceSubjects = @scienceSubjectsTemp3
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
    {
        name = MIP Satellite
        type = VesselParameterGroup
        title = Launch a new MIP research satellite
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The satellite must be a new vessel
		}
		
		PARAMETER
		{
			name = Sequence
			type = Sequence
			
			//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
			PARAMETER
			{
				name = OrbitA
				type = Orbit
				title = Put MIP into a somewhat elliptical orbit
			
				minApA = Random(1.1,1.3) * @targetBody.SpaceAltitudeThreshold()
				maxApA = Random(1.35,1.5) * @targetBody.SpaceAltitudeThreshold()
				maxPeA = (Random(0.4,0.7) * @targetBody.SpaceAltitudeThreshold()) < @targetBody.AtmosphereAltitude() ? (1.1 * @targetBody.AtmosphereAltitude()) :  (Random(0.4,0.7) * @targetBody.SpaceAltitudeThreshold())
				minInclination = Random(10,25)
				maxInclination = Random(30,40)
				disableOnStateChange = true
			}
			
			PARAMETER
			{
				name = CollectScienceA
				type = CollectScience
				title = Perform the experiment from both the lower and the higher altitudes within this orbit

				biome = @scienceSubject.Biome()
				situation = @scienceSubject.Situation()
				experiment = @scienceSubject.Experiment()
				recoveryMethod = @/recoveryMethod

				rewardFunds = Random(1000.0, 2000.0)
				
				disableOnStateChange = true

				ITERATOR
				{
					type = ScienceSubject
					scienceSubject = @/scienceSubjects
				}
			}
			
			//Orbit with random components to be both somewhat unpredictable and scalable to any size body. PeA needs to be below High Space to ensure both space situations are guaranteed to be within the parameters.
			PARAMETER
			{
				name = OrbitB
				type = Orbit
				title = Now change the orbit into a higher, more elliptical orbit
			
				minApA = (Random(7,8) * @targetBody.Radius()) > (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ? (Random(0.85,0.9) * (@targetBody.SphereOfInfluence() - @targetBody.Radius())) : (Random(7,8) * @targetBody.Radius())
				maxApA = (Random(8.1,9) * @targetBody.Radius()) > (@targetBody.SphereOfInfluence() - @targetBody.Radius()) ? (Random(0.94,0.98) * (@targetBody.SphereOfInfluence() - @targetBody.Radius())) : (Random(8.1,9) * @targetBody.Radius())
				minPeA = (Random(0.75,0.8) * @targetBody.SpaceAltitudeThreshold()) < @targetBody.AtmosphereAltitude() ? (1.1 * @targetBody.AtmosphereAltitude()) :  (Random(0.75,0.8) * @targetBody.SpaceAltitudeThreshold())
				maxPeA = (Random(0.94,0.98) * @targetBody.SpaceAltitudeThreshold()) < @targetBody.AtmosphereAltitude() ? (1.1 * @targetBody.AtmosphereAltitude()) :  (Random(0.94,0.98) * @targetBody.SpaceAltitudeThreshold())
				minInclination = Random(10,25)
				maxInclination = Random(30,40)
				disableOnStateChange = true
			}
			
			PARAMETER
			{
				name = CollectScienceB
				type = CollectScience
				title = Again perform the experiment from both the lower and the higher altitudes within this orbit

				biome = @scienceSubject.Biome()
				situation = @scienceSubject.Situation()
				experiment = @scienceSubject.Experiment()
				recoveryMethod = @/recoveryMethod

				rewardFunds = Random(1000.0, 2000.0)
				completeInSequence = true

				ITERATOR
				{
					type = ScienceSubject
					scienceSubject = @/scienceSubjects
				}
			}
			
		}
    }


	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit 
        targetBody = HomeWorld()
    }
	
	// Mission is no longer offered for bodies that have been landed on and returned from. This is to stop endless repetitions offered for bodies that have been largely explored already.
	REQUIREMENT
	{
    name = ReturnFromSurface
    type = ReturnFromSurface
	invertRequirement = true
	
    targetBody = @/targetBody
	}
	
	//Must have completed OGO contract first.
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = BDB_GeoStudy
		minCount = 1
		cooldownDuration = 0d
	}
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.

    REQUIREMENT
    {
        name = TechResearched
		type = TechResearched

        tech = survivability
    }
}